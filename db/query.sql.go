// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createConvo = `-- name: CreateConvo :exec
INSERT INTO Convo (title, slug, system)
VALUES (?, ?, ?)
`

type CreateConvoParams struct {
	Title  sql.NullString
	Slug   sql.NullString
	System sql.NullString
}

func (q *Queries) CreateConvo(ctx context.Context, arg CreateConvoParams) error {
	_, err := q.db.ExecContext(ctx, createConvo, arg.Title, arg.Slug, arg.System)
	return err
}

const createMessage = `-- name: CreateMessage :exec
INSERT INTO Messages (role, msg, convo_id)
VALUES (?, ?, ?)
`

type CreateMessageParams struct {
	Role    string
	Msg     string
	ConvoID sql.NullInt64
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.ExecContext(ctx, createMessage, arg.Role, arg.Msg, arg.ConvoID)
	return err
}

const createPin = `-- name: CreatePin :exec
INSERT INTO Pins (convo_id)
VALUES (?)
`

func (q *Queries) CreatePin(ctx context.Context, convoID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, createPin, convoID)
	return err
}

const createSettings = `-- name: CreateSettings :exec
INSERT INTO Settings (codify, model, editor, temp)
VALUES (?, ?, ?, ?)
`

type CreateSettingsParams struct {
	Codify bool
	Model  string
	Editor string
	Temp   float64
}

func (q *Queries) CreateSettings(ctx context.Context, arg CreateSettingsParams) error {
	_, err := q.db.ExecContext(ctx, createSettings,
		arg.Codify,
		arg.Model,
		arg.Editor,
		arg.Temp,
	)
	return err
}

const getConvo = `-- name: GetConvo :one
SELECT id, title, slug, system
FROM Convo
WHERE id = ?
`

func (q *Queries) GetConvo(ctx context.Context, id int64) (Convo, error) {
	row := q.db.QueryRowContext(ctx, getConvo, id)
	var i Convo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.System,
	)
	return i, err
}

const getMessage = `-- name: GetMessage :one
SELECT id, role, msg, convo_id
FROM Messages
WHERE id = ?
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Msg,
		&i.ConvoID,
	)
	return i, err
}

const getPin = `-- name: GetPin :one
SELECT id, convo_id
FROM Pins
WHERE id = ?
`

func (q *Queries) GetPin(ctx context.Context, id int64) (Pin, error) {
	row := q.db.QueryRowContext(ctx, getPin, id)
	var i Pin
	err := row.Scan(&i.ID, &i.ConvoID)
	return i, err
}

const getSettings = `-- name: GetSettings :one
SELECT codify, model, editor, "temp"
FROM Settings
LIMIT 1
`

func (q *Queries) GetSettings(ctx context.Context) (Setting, error) {
	row := q.db.QueryRowContext(ctx, getSettings)
	var i Setting
	err := row.Scan(
		&i.Codify,
		&i.Model,
		&i.Editor,
		&i.Temp,
	)
	return i, err
}

const listConvos = `-- name: ListConvos :many
SELECT id, title, slug, system
FROM Convo
`

func (q *Queries) ListConvos(ctx context.Context) ([]Convo, error) {
	rows, err := q.db.QueryContext(ctx, listConvos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Convo
	for rows.Next() {
		var i Convo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.System,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMessagesByConvo = `-- name: ListMessagesByConvo :many
SELECT id, role, msg, convo_id
FROM Messages
WHERE convo_id = ?
`

func (q *Queries) ListMessagesByConvo(ctx context.Context, convoID sql.NullInt64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessagesByConvo, convoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Msg,
			&i.ConvoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPinsByConvo = `-- name: ListPinsByConvo :many
SELECT id, convo_id
FROM Pins
WHERE convo_id = ?
`

func (q *Queries) ListPinsByConvo(ctx context.Context, convoID sql.NullInt64) ([]Pin, error) {
	rows, err := q.db.QueryContext(ctx, listPinsByConvo, convoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pin
	for rows.Next() {
		var i Pin
		if err := rows.Scan(&i.ID, &i.ConvoID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
